apply plugin: 'groovy'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'spring-boot'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'com.ofg:uptodate-gradle-plugin:1.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE'
        classpath 'pl.allegro.tech.build:axion-release-plugin:0.9.9'
        if (project.hasProperty("coverage")) { classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:+' }
    }
}

apply plugin: 'axion-release'

scmVersion {
    tag {
        prefix = ''
        createReleaseCommit = true
    }
}

sourceCompatibility = 1.7

group = 'com.ofg'
description = 'Runs stubs for service collaborators'
version = scmVersion.version

ext {
    stubRepositoryPath = 'repository'
    stubRegistryPort = 2181
    minStubPortNumber = 2300
    maxStubPortNumber = 2399
    context = 'pl'

    curatorVersion = '2.6.0'
    slf4jVersion = '1.7.7'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

project.gradle.projectsEvaluated {
    applicationDefaultJvmArgs = project.gradle.startParameter.systemPropertiesArgs.entrySet().collect {
        "-D${it.key}=${it.value}"
    }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.7'
    compile ('com.github.tomakehurst:wiremock:1.51') {
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
    }
    compile "org.apache.curator:curator-x-discovery:$curatorVersion"
    compile "org.apache.curator:curator-test:$curatorVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'args4j:args4j:2.0.29'
    compile 'javax.servlet:javax.servlet-api:3.0.1'

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

tasks.addRule('Pattern: run<Project>Stubs: Run stubs for project') { String taskName ->
    if (taskName == 'runStubs') {
        executeStubRunner(taskName, "-r $stubRepositoryPath -a true -z $stubRegistryPort -minp $minStubPortNumber -maxp $maxStubPortNumber -c $context")
    } else if (taskName.startsWith('run') && taskName.endsWith('Stubs')) {
        String projectName = taskName[3..(taskName.size() - 6)]
        String metadataFileName = projectName[0].toLowerCase() + projectName.substring(1)
        executeStubRunner(taskName, "-r $stubRepositoryPath -p ${metadataFileName}.json -z $stubRegistryPort -minp $minStubPortNumber -maxp $maxStubPortNumber")
    }
}

void executeStubRunner(String taskName, String arguments) {
    task (taskName, type: JavaExec, dependsOn: classes) {
        main = 'com.ofg.stub.StubRunner'
        classpath = sourceSets.main.output + configurations.compile
        args = arguments.split(' ') as List
        println "Running task with args $args"
    }
}

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

bintrayUpload.dependsOn 'build'

bintray {
    user = System.properties['bintrayUser']
    key = System.properties['bintrayKey']

    publications = ['mavenJava']
    pkg {
        repo = 'micro'
        userOrg = '4finance'
        name = project.name
        desc = project.description
        licenses = ['Apache-2.0']
        labels = ['microservice']
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact fatJar {
                classifier "fatJar"
            }
        }
    }
}

springBoot {
    backupSource = false
}

bootRepackage {
    classifier = 'fatJar'
}

jar {
    dependsOn addHashFile
    from "commitHash.txt"
    from('repository') {
        into 'repository'
    }
    exclude('logback.xml')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

task fatJar(type: Jar) {
    classifier = 'fatJar'
    from sourceSets.main.output
}

task fatJarBoot(type: BootRepackage, dependsOn: fatJar) {
    withJarTask = fatJar
}

task bootJars(dependsOn: build)

bootJars {
    dependsOn = [sourcesJar, javadocJar, fatJarBoot]
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

project.tasks.findAll { it.name.startsWith('publish') || it.name == 'bintrayUpload' }*.dependsOn(bootJars)

if(project.hasProperty("coverage")) {
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    test {
        ignoreFailures = true
    }
}

wrapper {
    gradleVersion '2.2'
}
