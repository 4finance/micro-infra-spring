buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE'
        classpath 'com.ofg:uptodate-gradle-plugin:+'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
        classpath 'pl.allegro.tech.build:axion-release-plugin:0.9.9'
        classpath "io.spring.gradle:dependency-management-plugin:0.2.1.RELEASE"
        if (project.hasProperty("coverage")) { classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:+' }
        if (project.hasProperty("compatibility")) { classpath "be.insaneprogramming.gradle:animalsniffer-gradle-plugin:+" }
    }
}

apply plugin: 'base'
apply plugin: 'axion-release'

scmVersion {
    tag {
        prefix = ''
        createReleaseCommit = true
    }
}

allprojects {
    group = 'com.ofg'
    project.version = scmVersion.version

    repositories {
        mavenLocal()
        jcenter()
    }

    configurations {
        all {
            resolutionStrategy {
                exclude group: 'log4j', module: 'log4j'
            }
        }
    }

}

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

def srcSubprojects = subprojects - project(':swagger')
configure(srcSubprojects) {
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.ofg.uptodate'
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = 1.7

    dependencyManagement {
        dependencies {
            "org.codehaus.groovy:groovy-all" "2.3.7"
            "org.springframework.boot:spring-boot-starter-web" "1.1.8.RELEASE"

            "ch.qos.logback:logback-classic" "1.1.2"
            "com.jayway.restassured:rest-assured" "2.4.0"
            "com.jayway.awaitility:awaitility" "1.6.3"

            dependencySet(group:'org.spockframework', version: '0.7-groovy-2.0') {
                entry "spock-core"
                entry "spock-spring"
            }
            dependencySet(group:'org.springframework', version: '4.1.1.RELEASE') {
                entry "spring-webmvc"
                entry "spring-context"
                entry "spring-test"
            }
        }
    }

    //Workaround for the issue with Java 8u11 and 7u65 - http://www.infoq.com/news/2014/08/Java8-U11-Broke-Tools
    test {
        jvmArgs project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
        jvmArgs '-noverify'
    }

    if (project.hasProperty("compatibility")) {
        apply plugin: 'be.insaneprogramming.gradle.animalsniffer'

        animalsniffer {
            signature = "org.codehaus.mojo.signature:java17:+@signature"
        }

        afterEvaluate {
            animalSniffer.mustRunAfter 'compileGroovy'
        }
    }

    bintrayUpload.dependsOn 'build'

    bintray {
        user = System.properties['bintrayUser']
        key = System.properties['bintrayKey']

        publications = ['mavenJava']
        pkg {
            repo = 'micro'
            userOrg = '4finance'
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            labels = ['microservice']
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                //#89 - workaround to not to have only runtime dependencies in generated pom.xml
                //Known limitation in maven-publish -  - http://forums.gradle.org/gradle/topics/maven_publish_plugin_generated_pom_making_dependency_scope_runtime#reply_14120711
                pom.withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                    //#70 - workaround for empty version in pom.xml when dependency-management-plugin is used
                    //Known limitation of new Gradle publishing mechanism - https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8
                    asNode().dependencies[0]?.get('dependency')?.each() { dep ->
                        String pomVer = dep.get("version").text();
                        String pomArtifactId = dep.get("artifactId").text();
                        String pomGroupId = dep.get("groupId").text();
                        if (pomVer.isEmpty()) {
                            def depVer = project.dependencyManagement.getManagedVersion("$pomGroupId", "$pomArtifactId")
                            dep.appendNode('version', depVer)
                        }
                    }
                }
            }
        }
    }

    jar {
        dependsOn addHashFile
        from "commitHash.txt"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: groovydoc) {
        classifier = 'javadoc'
        from groovydoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    //Dependencies in all subprojects - http://solidsoft.wordpress.com/2014/11/13/gradle-tricks-display-dependencies-for-all-subprojects-in-multi-project-build/
    task allDeps(type: DependencyReportTask) {}
    task allInsight(type: DependencyInsightReportTask) {}
}

if(project.hasProperty("coverage")) {
    configure(srcSubprojects + rootProject) {
        apply plugin: 'jacoco'

        jacoco {
            toolVersion = '0.7.1.201405082137'
        }
    }

    configure(srcSubprojects) {
        jacocoTestReport {
            reports {
                xml.enabled = true // coveralls plugin depends on xml format report
            }
        }

        test {
            jacoco {
                excludes = ['*Configuration']
            }
        }
    }

    apply plugin: 'com.github.kt3k.coveralls'

    coveralls {
        sourceDirs = files(srcSubprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    }

    task jacocoRootReport(type: JacocoReport) {
        // Gather execution data from all subprojects
        // (change this if you e.g. want to calculate unit test/integration test coverage separately)
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

        // Add all relevant sourcesets from the subprojects
        srcSubprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled true
            xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
    }

    // always run the tests before generating the report
    jacocoRootReport.dependsOn {
        srcSubprojects*.test
        srcSubprojects*.jacocoTestReport
    }
}

wrapper {
    gradleVersion '2.2'
}
