apply plugin: 'groovy'
apply plugin: 'com.ofg.uptodate'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'com.ofg:uptodate-gradle-plugin:1.0.0'
        if (project.hasProperty("coverage")) { classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:+' }
    }
}

sourceCompatibility = 1.7

ext {
    stubRepository = 'repository'
    stubRegistryPort = 2181
    minStubPortNumber = 2300
    maxStubPortNumber = 2399
    context = 'pl'

    curatorVersion = '2.6.0'
    slf4jVersion = '1.7.7'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile 'com.github.tomakehurst:wiremock:1.47'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
    compile "org.apache.curator:curator-x-discovery:$curatorVersion"
    compile "org.apache.curator:curator-test:$curatorVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    compile 'ch.qos.logback:logback-classic:1.1.2'

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

tasks.addRule('Pattern: runStubs<Project>: Run stubs for project') { String taskName ->
    if (taskName == 'runStubs') {
        String skipLoadingMetadataMarker = ''
        executeStubRunner(taskName, [ stubRepository, skipLoadingMetadataMarker, stubRegistryPort, minStubPortNumber, maxStubPortNumber, context ])

    } else if (taskName.startsWith('runStubs')) {
        String metadata = taskName - 'runStubs'
        metadata = metadata[0].toLowerCase() + metadata.substring(1)
        executeStubRunner(taskName, [ stubRepository, "${metadata}.json", stubRegistryPort, minStubPortNumber, maxStubPortNumber ])
    }
}

void executeStubRunner(String taskName, List arguments) {
    task (taskName, type: JavaExec, dependsOn: classes) {
        main = 'com.ofg.stub.Main'
        classpath = sourceSets.main.output + configurations.compile
        args = arguments
        println "Running task with args $args"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}


if(project.hasProperty("coverage")) {
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'sonar-runner'
    apply plugin: 'com.github.kt3k.coveralls'

    jacoco {
        toolVersion = "0.7.0.201403182114"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    codenarc {
        configFile = file('config/codenarc/rules.groovy')
        maxPriority1Violations = 0
        maxPriority2Violations = 6
        maxPriority3Violations = 10
        reportFormat = 'xml'
        ignoreFailures = true
    }

    dependencies {
        codenarc 'org.codenarc:CodeNarc:0.21'
    }

    test {
        ignoreFailures = true
        jacoco {
            excludes = ['*Configuration']
        }
    }

    sonarRunner {
        sonarProperties {
            //TODO: fill this
        }
    }
}