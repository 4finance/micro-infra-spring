buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE'
        classpath 'com.ofg:uptodate-gradle-plugin:+'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
        classpath 'pl.allegro.tech.build:axion-release-plugin:0.9.4'
        if (project.hasProperty("coverage")) { classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:+' }
    }
}

apply plugin: 'base'
apply plugin: 'axion-release'

scmVersion {
    tag {
        prefix = ''
    }
}

allprojects {
    group = 'com.ofg'
    project.version = scmVersion.version

    repositories {
        mavenLocal()
        jcenter()
    }
}

ext {
    microDepsSpringConfigVersion = '0.5.0'
    groovyVersion = '2.3.7'
    spockVersion = '0.7-groovy-2.0'
    springBootVersion = '1.1.8.RELEASE'
    springTestVersion = '4.1.1.RELEASE'
}

task addHashFile << {
    String gitCmd = "git log --pretty=format:'%H' -n 1"
    def proc = gitCmd.execute()
    proc.waitFor()
    new File("commitHash.txt").withWriter { it << proc.in.text }
}

def srcSubprojects = subprojects - project(':swagger')
configure(srcSubprojects) {
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.ofg.uptodate'

    sourceCompatibility = 1.7

    //Workaround for the issue with Java 8u11 and 7u65 - http://www.infoq.com/news/2014/08/Java8-U11-Broke-Tools
    test {
        jvmArgs '-noverify'
    }

    bintrayUpload.dependsOn 'build'

    bintray {
        user = System.properties['bintrayUser']
        key = System.properties['bintrayKey']

        publications = ['mavenJava']
        pkg {
            repo = 'micro'
            userOrg = '4finance'
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            labels = ['microservice']
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    jar {
        dependsOn addHashFile
        from "commitHash.txt"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: groovydoc) {
        classifier = 'javadoc'
        from groovydoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

if(project.hasProperty("coverage")) {
    configure(srcSubprojects + rootProject) {
        apply plugin: 'jacoco'

        jacoco {
            toolVersion = '0.7.1.201405082137'
        }
    }

    configure(srcSubprojects) {
        jacocoTestReport {
            reports {
                xml.enabled = true // coveralls plugin depends on xml format report
            }
        }

        test {
            ignoreFailures = true
            jacoco {
                excludes = ['*Configuration']
            }
        }
    }

    apply plugin: 'com.github.kt3k.coveralls'

    coveralls {
        sourceDirs = files(srcSubprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    }

    task jacocoRootReport(type: JacocoReport) {
        // Gather execution data from all subprojects
        // (change this if you e.g. want to calculate unit test/integration test coverage separately)
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

        // Add all relevant sourcesets from the subprojects
        srcSubprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled true
            xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
    }

    // always run the tests before generating the report
    jacocoRootReport.dependsOn {
        srcSubprojects*.test
        srcSubprojects*.jacocoTestReport
    }
}

wrapper {
    gradleVersion '2.2'
}
